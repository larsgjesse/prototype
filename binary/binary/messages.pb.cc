// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpdateSignal_StaResult_LinkMeasurement_messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UpdateSignal_StaResult_messages_2eproto;
class UpdateSignal_StaResult_LinkMeasurementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateSignal_StaResult_LinkMeasurement> _instance;
} _UpdateSignal_StaResult_LinkMeasurement_default_instance_;
class UpdateSignal_StaResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateSignal_StaResult> _instance;
} _UpdateSignal_StaResult_default_instance_;
class UpdateSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateSignal> _instance;
} _UpdateSignal_default_instance_;
static void InitDefaultsUpdateSignal_StaResult_LinkMeasurement_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateSignal_StaResult_LinkMeasurement_default_instance_;
    new (ptr) ::UpdateSignal_StaResult_LinkMeasurement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateSignal_StaResult_LinkMeasurement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpdateSignal_StaResult_LinkMeasurement_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpdateSignal_StaResult_LinkMeasurement_messages_2eproto}, {}};

static void InitDefaultsUpdateSignal_StaResult_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateSignal_StaResult_default_instance_;
    new (ptr) ::UpdateSignal_StaResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateSignal_StaResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateSignal_StaResult_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateSignal_StaResult_messages_2eproto}, {
      &scc_info_UpdateSignal_StaResult_LinkMeasurement_messages_2eproto.base,}};

static void InitDefaultsUpdateSignal_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateSignal_default_instance_;
    new (ptr) ::UpdateSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateSignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdateSignal_messages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdateSignal_messages_2eproto}, {
      &scc_info_UpdateSignal_StaResult_messages_2eproto.base,}};

void InitDefaults_messages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateSignal_StaResult_LinkMeasurement_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateSignal_StaResult_messages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdateSignal_messages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_messages_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateSignal_StaResult_LinkMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateSignal_StaResult_LinkMeasurement, bssid_),
  PROTOBUF_FIELD_OFFSET(::UpdateSignal_StaResult_LinkMeasurement, rssi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateSignal_StaResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateSignal_StaResult, stamac_),
  PROTOBUF_FIELD_OFFSET(::UpdateSignal_StaResult, linkmeasurements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateSignal, bssid_),
  PROTOBUF_FIELD_OFFSET(::UpdateSignal, staresults_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UpdateSignal_StaResult_LinkMeasurement)},
  { 7, -1, sizeof(::UpdateSignal_StaResult)},
  { 14, -1, sizeof(::UpdateSignal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UpdateSignal_StaResult_LinkMeasurement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UpdateSignal_StaResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UpdateSignal_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2eproto = {
  {}, AddDescriptors_messages_2eproto, "messages.proto", schemas,
  file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, 3, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, InitDefaults_messages_2eproto, 
  "\n\016messages.proto\"\333\001\n\014UpdateSignal\022\r\n\005BSS"
  "ID\030\001 \001(\006\022+\n\nstaresults\030\002 \003(\0132\027.UpdateSig"
  "nal.StaResult\032\216\001\n\tStaResult\022\016\n\006StaMAC\030\001 "
  "\001(\006\022A\n\020linkmeasurements\030\002 \003(\0132\'.UpdateSi"
  "gnal.StaResult.LinkMeasurement\032.\n\017LinkMe"
  "asurement\022\r\n\005BSSID\030\001 \001(\006\022\014\n\004rssi\030\002 \001(\021b\006"
  "proto3"
,
  "messages.proto", &assign_descriptors_table_messages_2eproto, 246,
};

void AddDescriptors_messages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2eproto = []() { AddDescriptors_messages_2eproto(); return true; }();

// ===================================================================

void UpdateSignal_StaResult_LinkMeasurement::InitAsDefaultInstance() {
}
class UpdateSignal_StaResult_LinkMeasurement::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSignal_StaResult_LinkMeasurement::kBSSIDFieldNumber;
const int UpdateSignal_StaResult_LinkMeasurement::kRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSignal_StaResult_LinkMeasurement::UpdateSignal_StaResult_LinkMeasurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpdateSignal.StaResult.LinkMeasurement)
}
UpdateSignal_StaResult_LinkMeasurement::UpdateSignal_StaResult_LinkMeasurement(const UpdateSignal_StaResult_LinkMeasurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bssid_, &from.bssid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rssi_) -
    reinterpret_cast<char*>(&bssid_)) + sizeof(rssi_));
  // @@protoc_insertion_point(copy_constructor:UpdateSignal.StaResult.LinkMeasurement)
}

void UpdateSignal_StaResult_LinkMeasurement::SharedCtor() {
  ::memset(&bssid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&bssid_)) + sizeof(rssi_));
}

UpdateSignal_StaResult_LinkMeasurement::~UpdateSignal_StaResult_LinkMeasurement() {
  // @@protoc_insertion_point(destructor:UpdateSignal.StaResult.LinkMeasurement)
  SharedDtor();
}

void UpdateSignal_StaResult_LinkMeasurement::SharedDtor() {
}

void UpdateSignal_StaResult_LinkMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSignal_StaResult_LinkMeasurement& UpdateSignal_StaResult_LinkMeasurement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateSignal_StaResult_LinkMeasurement_messages_2eproto.base);
  return *internal_default_instance();
}


void UpdateSignal_StaResult_LinkMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateSignal.StaResult.LinkMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bssid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&bssid_)) + sizeof(rssi_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateSignal_StaResult_LinkMeasurement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateSignal_StaResult_LinkMeasurement*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // fixed64 BSSID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_bssid(val);
        break;
      }
      // sint32 rssi = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = ::google::protobuf::internal::WireFormatLite::ZigZagDecode32(val);
        msg->set_rssi(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateSignal_StaResult_LinkMeasurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpdateSignal.StaResult.LinkMeasurement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 BSSID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bssid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 rssi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpdateSignal.StaResult.LinkMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpdateSignal.StaResult.LinkMeasurement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateSignal_StaResult_LinkMeasurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpdateSignal.StaResult.LinkMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 BSSID = 1;
  if (this->bssid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->bssid(), output);
  }

  // sint32 rssi = 2;
  if (this->rssi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->rssi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpdateSignal.StaResult.LinkMeasurement)
}

::google::protobuf::uint8* UpdateSignal_StaResult_LinkMeasurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UpdateSignal.StaResult.LinkMeasurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 BSSID = 1;
  if (this->bssid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->bssid(), target);
  }

  // sint32 rssi = 2;
  if (this->rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->rssi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateSignal.StaResult.LinkMeasurement)
  return target;
}

size_t UpdateSignal_StaResult_LinkMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateSignal.StaResult.LinkMeasurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 BSSID = 1;
  if (this->bssid() != 0) {
    total_size += 1 + 8;
  }

  // sint32 rssi = 2;
  if (this->rssi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->rssi());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSignal_StaResult_LinkMeasurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateSignal.StaResult.LinkMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSignal_StaResult_LinkMeasurement* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateSignal_StaResult_LinkMeasurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateSignal.StaResult.LinkMeasurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateSignal.StaResult.LinkMeasurement)
    MergeFrom(*source);
  }
}

void UpdateSignal_StaResult_LinkMeasurement::MergeFrom(const UpdateSignal_StaResult_LinkMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateSignal.StaResult.LinkMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bssid() != 0) {
    set_bssid(from.bssid());
  }
  if (from.rssi() != 0) {
    set_rssi(from.rssi());
  }
}

void UpdateSignal_StaResult_LinkMeasurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateSignal.StaResult.LinkMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSignal_StaResult_LinkMeasurement::CopyFrom(const UpdateSignal_StaResult_LinkMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateSignal.StaResult.LinkMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSignal_StaResult_LinkMeasurement::IsInitialized() const {
  return true;
}

void UpdateSignal_StaResult_LinkMeasurement::Swap(UpdateSignal_StaResult_LinkMeasurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSignal_StaResult_LinkMeasurement::InternalSwap(UpdateSignal_StaResult_LinkMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bssid_, other->bssid_);
  swap(rssi_, other->rssi_);
}

::google::protobuf::Metadata UpdateSignal_StaResult_LinkMeasurement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateSignal_StaResult::InitAsDefaultInstance() {
}
class UpdateSignal_StaResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSignal_StaResult::kStaMACFieldNumber;
const int UpdateSignal_StaResult::kLinkmeasurementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSignal_StaResult::UpdateSignal_StaResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpdateSignal.StaResult)
}
UpdateSignal_StaResult::UpdateSignal_StaResult(const UpdateSignal_StaResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      linkmeasurements_(from.linkmeasurements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stamac_ = from.stamac_;
  // @@protoc_insertion_point(copy_constructor:UpdateSignal.StaResult)
}

void UpdateSignal_StaResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateSignal_StaResult_messages_2eproto.base);
  stamac_ = PROTOBUF_ULONGLONG(0);
}

UpdateSignal_StaResult::~UpdateSignal_StaResult() {
  // @@protoc_insertion_point(destructor:UpdateSignal.StaResult)
  SharedDtor();
}

void UpdateSignal_StaResult::SharedDtor() {
}

void UpdateSignal_StaResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSignal_StaResult& UpdateSignal_StaResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateSignal_StaResult_messages_2eproto.base);
  return *internal_default_instance();
}


void UpdateSignal_StaResult::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateSignal.StaResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linkmeasurements_.Clear();
  stamac_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateSignal_StaResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateSignal_StaResult*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // fixed64 StaMAC = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_stamac(val);
        break;
      }
      // repeated .UpdateSignal.StaResult.LinkMeasurement linkmeasurements = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::UpdateSignal_StaResult_LinkMeasurement::_InternalParse;
          object = msg->add_linkmeasurements();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateSignal_StaResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpdateSignal.StaResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 StaMAC = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &stamac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UpdateSignal.StaResult.LinkMeasurement linkmeasurements = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_linkmeasurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpdateSignal.StaResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpdateSignal.StaResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateSignal_StaResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpdateSignal.StaResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 StaMAC = 1;
  if (this->stamac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->stamac(), output);
  }

  // repeated .UpdateSignal.StaResult.LinkMeasurement linkmeasurements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->linkmeasurements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->linkmeasurements(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpdateSignal.StaResult)
}

::google::protobuf::uint8* UpdateSignal_StaResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UpdateSignal.StaResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 StaMAC = 1;
  if (this->stamac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->stamac(), target);
  }

  // repeated .UpdateSignal.StaResult.LinkMeasurement linkmeasurements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->linkmeasurements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->linkmeasurements(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateSignal.StaResult)
  return target;
}

size_t UpdateSignal_StaResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateSignal.StaResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UpdateSignal.StaResult.LinkMeasurement linkmeasurements = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->linkmeasurements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->linkmeasurements(static_cast<int>(i)));
    }
  }

  // fixed64 StaMAC = 1;
  if (this->stamac() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSignal_StaResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateSignal.StaResult)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSignal_StaResult* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateSignal_StaResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateSignal.StaResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateSignal.StaResult)
    MergeFrom(*source);
  }
}

void UpdateSignal_StaResult::MergeFrom(const UpdateSignal_StaResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateSignal.StaResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linkmeasurements_.MergeFrom(from.linkmeasurements_);
  if (from.stamac() != 0) {
    set_stamac(from.stamac());
  }
}

void UpdateSignal_StaResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateSignal.StaResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSignal_StaResult::CopyFrom(const UpdateSignal_StaResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateSignal.StaResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSignal_StaResult::IsInitialized() const {
  return true;
}

void UpdateSignal_StaResult::Swap(UpdateSignal_StaResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSignal_StaResult::InternalSwap(UpdateSignal_StaResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&linkmeasurements_)->InternalSwap(CastToBase(&other->linkmeasurements_));
  swap(stamac_, other->stamac_);
}

::google::protobuf::Metadata UpdateSignal_StaResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdateSignal::InitAsDefaultInstance() {
}
class UpdateSignal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSignal::kBSSIDFieldNumber;
const int UpdateSignal::kStaresultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSignal::UpdateSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpdateSignal)
}
UpdateSignal::UpdateSignal(const UpdateSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      staresults_(from.staresults_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bssid_ = from.bssid_;
  // @@protoc_insertion_point(copy_constructor:UpdateSignal)
}

void UpdateSignal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdateSignal_messages_2eproto.base);
  bssid_ = PROTOBUF_ULONGLONG(0);
}

UpdateSignal::~UpdateSignal() {
  // @@protoc_insertion_point(destructor:UpdateSignal)
  SharedDtor();
}

void UpdateSignal::SharedDtor() {
}

void UpdateSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSignal& UpdateSignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdateSignal_messages_2eproto.base);
  return *internal_default_instance();
}


void UpdateSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  staresults_.Clear();
  bssid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateSignal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdateSignal*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // fixed64 BSSID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_bssid(val);
        break;
      }
      // repeated .UpdateSignal.StaResult staresults = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::UpdateSignal_StaResult::_InternalParse;
          object = msg->add_staresults();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpdateSignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 BSSID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bssid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .UpdateSignal.StaResult staresults = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_staresults()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpdateSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpdateSignal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpdateSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 BSSID = 1;
  if (this->bssid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->bssid(), output);
  }

  // repeated .UpdateSignal.StaResult staresults = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->staresults_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->staresults(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UpdateSignal)
}

::google::protobuf::uint8* UpdateSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UpdateSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 BSSID = 1;
  if (this->bssid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->bssid(), target);
  }

  // repeated .UpdateSignal.StaResult staresults = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->staresults_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->staresults(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateSignal)
  return target;
}

size_t UpdateSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UpdateSignal.StaResult staresults = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->staresults_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->staresults(static_cast<int>(i)));
    }
  }

  // fixed64 BSSID = 1;
  if (this->bssid() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSignal* source =
      ::google::protobuf::DynamicCastToGenerated<UpdateSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateSignal)
    MergeFrom(*source);
  }
}

void UpdateSignal::MergeFrom(const UpdateSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  staresults_.MergeFrom(from.staresults_);
  if (from.bssid() != 0) {
    set_bssid(from.bssid());
  }
}

void UpdateSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSignal::CopyFrom(const UpdateSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSignal::IsInitialized() const {
  return true;
}

void UpdateSignal::Swap(UpdateSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSignal::InternalSwap(UpdateSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&staresults_)->InternalSwap(CastToBase(&other->staresults_));
  swap(bssid_, other->bssid_);
}

::google::protobuf::Metadata UpdateSignal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::UpdateSignal_StaResult_LinkMeasurement* Arena::CreateMaybeMessage< ::UpdateSignal_StaResult_LinkMeasurement >(Arena* arena) {
  return Arena::CreateInternal< ::UpdateSignal_StaResult_LinkMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateSignal_StaResult* Arena::CreateMaybeMessage< ::UpdateSignal_StaResult >(Arena* arena) {
  return Arena::CreateInternal< ::UpdateSignal_StaResult >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateSignal* Arena::CreateMaybeMessage< ::UpdateSignal >(Arena* arena) {
  return Arena::CreateInternal< ::UpdateSignal >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
